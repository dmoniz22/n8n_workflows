{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "XML": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings_Cohere": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Edit Input": {
      "main": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "List Documents1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Cohere": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Reranker Cohere": {
      "ai_reranker": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_reranker",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Create Document Rows Table (for Tabular Data) & n8n chat histories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-02T20:24:22.481Z",
  "id": "SgrDvJgHN6sCaEhf",
  "isArchived": false,
  "meta": null,
  "name": "crawl4Ai-rag",
  "nodes": [
    {
      "parameters": {},
      "id": "8631739a-6423-4adf-a538-429b4e3fa0ab",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        32,
        560
      ]
    },
    {
      "parameters": {
        "url": "https://sydneysothebysrealty.com/cns/sitemap/forsale",
        "options": {}
      },
      "id": "60dc2e53-05e3-4ec5-8396-58dd7c42ad45",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "43a5dcb4-5b87-4179-8d3f-4101e044e5a2",
      "name": "XML",
      "type": "n8n-nodes-base.xml",
      "typeVersion": 1,
      "position": [
        368,
        560
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "urlset.url",
        "options": {}
      },
      "id": "fb0601b2-8476-4c91-ab8b-f8add0470ea6",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        528,
        560
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1e4edb9c-e6a5-4878-a0b8-dd274500a9da",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        688,
        640
      ]
    },
    {
      "parameters": {},
      "id": "e18df90c-62f0-46f8-9ffe-7aac2645d782",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1136,
        544
      ],
      "webhookId": "32bffa96-a0b0-48f2-a3a3-bd476802df42"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://someapp-fo33d.ondigitalocean.app/crawl",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "urls",
              "value": "={{ [$json.loc] }}"
            },
            {
              "name": "priority",
              "value": "10"
            }
          ]
        },
        "options": {}
      },
      "id": "ba7dff5b-0e05-45fd-a444-ac04ea6eb51e",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        944,
        544
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9d90c1ce-590e-40a5-ae8c-d92326032975",
              "leftValue": "={{ $json.success }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6d960f86-542a-4986-b347-c459b399b227",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1296,
        688
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f2bcdb54-e1fe-4670-99aa-6eec973bf5f1",
              "name": "task_id",
              "value": "={{ $('HTTP Request1').item.json.task_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bac0d7d6-bd99-4e8a-9da8-131014d5e14c",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1488,
        768
      ]
    },
    {
      "parameters": {
        "content": "## n8n + Crawl4AI Agent for Real Estate Listings\n\n## Author: [Ari Nakos](https://youtube.com/just_aristides)\n\n###  This AI agent demonstrates how to crawl and process Sydney Sotheby's real estate listings using a Docker deployment of Crawl4AI, then vectorize the content\n  for RAG (Retrieval-Augmented Generation) applications.\n\n###  How this workflow operates\n\n###  1. Sitemap Extraction: Fetches the XML sitemap from Sydney Sotheby's real estate listings (forsale properties)\n###  2. URL Processing: Parses the XML and splits out individual property URLs for processing\n###  3. Batch Crawling: Loops through property URLs in batches, sending each to the Crawl4AI service for content extraction\n###  4. Asynchronous Processing: Uses wait nodes to handle the asynchronous nature of the crawling tasks\n###  5. Success Validation: Checks if each crawl was successful before proceeding to vectorization\n###  6. Content Vectorization: Processes successful crawls through:\n    - Default Data Loader to extract text content\n    - Character Text Splitter to chunk the content appropriately\n    - Cohere Embeddings for multilingual vector generation\n    - Supabase Vector Store for persistent storage and RAG queries\n\n## Prerequisites\n\n###  - Crawl4AI hosted in a Docker container following the https://docs.crawl4ai.com/core/docker-deployment/\n###  - Supabase database configured with vector storage capabilities\n###  - Cohere API key for embeddings generation\n\n## Use Cases\n\n###  This workflow enables semantic search and question-answering about Sydney Sotheby's real estate listings, perfect for property analysis, market research, or building intelligent real estate assistants.",
        "height": 1110,
        "width": 734,
        "color": 6
      },
      "id": "5bc8300c-0694-4c81-8198-8b448739d279",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -784,
        464
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.results[0].cleaned_html }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_title",
                "value": "={{ $json.results[0].metadata.title }}"
              },
              {
                "name": "file_description",
                "value": "={{ $json.results[0].metadata.description }}"
              }
            ]
          }
        }
      },
      "id": "40964d73-10c9-4966-b094-e3db14733e89",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1616,
        640
      ]
    },
    {
      "parameters": {},
      "id": "2ed67c7b-2d13-4147-be19-b2cad92ad198",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        1680,
        768
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "c8206c69-1f9e-4ee1-8be0-cae6c6145858",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1488,
        480
      ]
    },
    {
      "parameters": {
        "modelName": "embed-multilingual-v3.0"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        1488,
        656
      ],
      "id": "06030bb1-c05c-4161-a118-98604d560bde",
      "name": "Embeddings_Cohere"
    },
    {
      "parameters": {
        "content": "## 2) RAG AI Agent with Chat Interface",
        "height": 565,
        "width": 696
      },
      "id": "fa4fe236-a14f-43d1-89f5-9c9001d703a6",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        1008
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "26ff2ad5-07b9-434c-a84c-3f70ef3bc151",
      "name": "Edit Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        192,
        1168
      ]
    },
    {
      "parameters": {
        "content": "## Agent Tools for RAG",
        "height": 469,
        "width": 503,
        "color": 4
      },
      "id": "7889a422-ddf4-4dfe-b2bf-5eeb9f0df274",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        752,
        1056
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        32,
        1168
      ],
      "id": "91e6fa1d-8fc0-460d-bfe5-f95e50a9f664",
      "name": "When chat message received",
      "webhookId": "58508332-2c19-4546-838b-3c3a5c1f76d5"
    },
    {
      "parameters": {},
      "id": "2d5079b2-7a3c-4e58-9728-6fab027ae879",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        400,
        1408
      ],
      "notesInFlow": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a personal assistant who helps answer questions from a corpus of documents. Documents are text based (Txt, docs, extracted PDFs, etc.)\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document.\n\nAlways start by performing RAG. If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "id": "451c2e7f-8f6a-49d1-a12c-8a9773a71744",
      "name": "RAG AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        368,
        1104
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        560,
        1408
      ],
      "id": "95b0e776-98a9-4e59-bf28-b697e51830f1",
      "name": "List Documents1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        240,
        1408
      ],
      "id": "73274353-3754-479d-9ea7-08ddf0814f5e",
      "name": "OpenRouter Chat Model1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.rerankerCohere",
      "typeVersion": 1,
      "position": [
        1040,
        1392
      ],
      "id": "18b0079b-3842-4f0f-8c30-66e1bcff68aa",
      "name": "Reranker Cohere"
    },
    {
      "parameters": {
        "modelName": "embed-multilingual-v3.0"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        800,
        1376
      ],
      "id": "1801a54b-d15a-40da-baff-d0c6938951f8",
      "name": "Embeddings Cohere"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "useReranker": true,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        848,
        1232
      ],
      "id": "97271e27-6b22-4c8a-8a49-567f436aba34",
      "name": "Supabase Vector Store"
    },
    {
      "parameters": {
        "content": "## 1) Crawl4AI Scrape and Vectorize Knowledge",
        "height": 501,
        "width": 1880,
        "color": 3
      },
      "id": "13d655df-98b3-4acb-8979-86b12c66affb",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        464
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        272,
        128
      ],
      "id": "18810ca2-2ae6-4160-afda-0c93ea5b711d",
      "name": "Create Document Metadata Table"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1024) -- 1024 because of Cohere English v2.0 embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        96,
        128
      ],
      "id": "7cb3dac2-3c9c-4768-9f4e-398f621fde17",
      "name": "Create Documents Table and Match Function"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);\n\nCREATE TABLE n8n_chat_histories (\n  id serial not null,\n  session_id character varying(255) not null,\n  message jsonb not null,\n  constraint n8n_chat_histories_pkey primary key (id)\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        448,
        128
      ],
      "id": "51e28d17-77ea-4cd0-818d-101d9b15312c",
      "name": "Create Document Rows Table (for Tabular Data) & n8n chat histories"
    },
    {
      "parameters": {
        "content": "## 0) Set Up DB Tables (once)",
        "height": 440,
        "width": 680,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "46ef0c31-5b70-4516-8314-bc8858481cec",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "repo_name": "n8n_workflows",
  "repo_owner": "dmoniz22",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-02T20:24:22.485Z",
      "updatedAt": "2025-10-02T20:24:22.485Z",
      "role": "workflow:owner",
      "workflowId": "SgrDvJgHN6sCaEhf",
      "projectId": "WI0IP68OjrENkbwD"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-02T20:24:22.481Z",
  "versionId": "f3ab4c4c-d182-4fe1-beb7-39f1d4c30ed5"
}